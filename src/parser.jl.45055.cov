        - abstract type AbstractBasisSet end
        - 
        - struct GaussianBasisSet <: AbstractBasisSet
        7     R::Matrix{Float64}
        -     α::Matrix{Float64}
        -     d::Matrix{Float64}
        -     N::Matrix{Float64}
        -     size::Int
        -     ℓ::Int
        -     m::Int
        -     n::Int
        - end
        - 
        5 function _angularmomentum(ℓ::T) where T <: Integer
      180     orbitals = Dict(
        -         0 => [(0,0,0)],
        - 
        -         1 => [(1,0,0),(0,1,0),(0,0,1)],
        - 
        -         2 => [(2,0,0),(1,1,0),(1,0,1),(0,2,0),(0,1,1),(0,0,2)],
        - 
        -         3 => [(3,0,0),(2,1,0),(2,0,1),(1,2,0),(1,1,1),(1,0,2),
        -               (0,3,0),(0,2,1),(0,1,2), (0,0,3)],
        - 
        -         4 => [(4,0,0),(3,1,0),(3,0,1),(2,2,0),(2,1,1),(2,0,2),
        -               (1,3,0),(1,2,1),(1,1,2),(1,0,3),(0,4,0),(0,3,1),
        -               (0,2,2),(0,1,3),(0,0,4)],
        - 
        -         5 => [(5,0,0),(4,1,0),(4,0,1),(3,2,0),(3,1,1),(3,0,2),
        -               (2,3,0),(2,2,1),(2,1,2),(2,0,3),(1,4,0),(1,3,1),
        -               (1,2,2),(1,1,3),(1,0,4),(0,5,0),(0,4,1),(0,3,2),
        -               (0,2,3),(0,1,4),(0,0,5)],
        - 
        -         6 => [(6,0,0),(5,1,0),(5,0,1),(4,2,0),(4,1,1),(4,0,2),
        -               (3,3,0),(3,2,1),(3,1,2),(3,0,3),(2,4,0),(2,3,1),
        -               (2,2,2),(2,1,3),(2,0,4),(1,5,0),(1,4,1),(1,3,2),
        -               (1,2,3),(1,1,4),(1,0,5),(0,6,0),(0,5,1),(0,4,2),
        -               (0,3,3),(0,2,4),(0,1,5),(0,0,6)],
        - 
        -         7 => [(7,0,0),(6,1,0),(6,0,1),(5,2,0),(5,1,1),(5,0,2),
        -               (4,3,0),(4,2,1),(4,1,2),(4,0,3),(3,4,0),(3,3,1),
        -               (3,2,2),(3,1,3),(3,0,4),(2,5,0),(2,4,1),(2,3,2),
        -               (2,2,3),(2,1,4),(2,0,5),(1,6,0),(1,5,1),(1,4,2),
        -               (1,3,3),(1,2,4),(1,1,5),(1,0,6),(0,7,0),(0,6,1),
        -               (0,5,2),(0,4,3),(0,3,4),(0,2,5),(0,1,6),(0,0,7)]
        -     )
        - 
        5     return orbitals[ℓ]
        - end
        - 
        - """
        - This function takes a `Molecule` type and convert into a list of `Atom` type.
        - """
        1 function getatoms(molecule::Molecule)
        1     atoms = []
        1     n = length(molecule.atoms)
        1     coords = molecule.coords
        - 
        1     for index in 1:n
        3         atomicnumber = molecule.numbers[index]
        - 
        3         push!(atoms, 
        -             Atom(
        -                 molecule.atoms[index], 
        -                 atomicnumber, 
        -                 coords[index:index, :])
        -             )
        5     end
        - 
        1     return atoms
        - end
        - 
        1 function _getbasis(atoms, basis)
        1     atomicnumbers = [atom.number for atom in atoms]
        1     elements = join(atomicnumbers, ",")
        - 
        2     url = "https://www.basissetexchange.org/api/basis/" * basis * "/format/json/?version=0&elements=" * "$(elements)"
        2     response = HTTP.request("GET", url)
        - 
        1     data = String(response.body)
        1     data = JSON3.read(data)
        - 
        1     return data
        - end
        - 
        - function _getbasis_fromfile(atoms, basis)
        -     atomicnumbers = [atom.number for atom in atoms]
        -     elements = join(atomicnumbers, ",")
        - 
        -     met = metadata()
        -     imp = met[basis]["versions"]["1"]["file_relpath"]
        -     imp2 = JSON3.read("src/data/" * imp)
        - 
        -     data = []
        - 
        -     for atom in atoms
        -         imp3 = JSON3.read("src/data/" * imp2["elements"]["$(atom.number)"])  
        -         imp4 = imp3["elements"]["$(atom.number)"]["components"]
        -         imp5 = JSON3.read("src/data/" * imp4[1])
        -         push!(data, imp5["elements"]["$(atom.number)"])
        -     end
        - 
        -     return data
        - end
        - 
        - 
       63 function doublefactorial(number)
       72     fact = foldl(Base.:*, range(number, 1, step=-2))
        - 
       63     return fact
        - end
        - 
       21 function normalization(α, ℓ, m, n)
       30     N = (4 * α)^(ℓ + m + n)
       21     N /=
        -         doublefactorial(2 * ℓ - 1) * doublefactorial(2 * m - 1) * doublefactorial(2 * n - 1)
       42     N *= ((2 * α) / π)^(3 / 2)
       21     N = sqrt(N)
        - 
       21     return N
        - end
        - 
        - """
        - The ```parsebasis``` method takes an XYZ file and returns a list of ```GaussianBasisSet``` objects. 
        - The XYZ file is a simple text file that contains the number of atoms in the first line, 
        - followed by the atomic symbols and the Cartesian coordinates of each atom. 
        - For example, the following is the XYZ file for a water molecule:
        - 
        - ```julia
        - 3
        - 
        - O 0.000000 -0.007156 0.965491
        - H 0.000000 0.001486 -0.003471
        - H 0.000000 0.931026 1.207929
        - ```
        - 
        - We give the file as an input:
        - 
        - ```julia
        - 621g = parsebasis("../test/data/water/water.xyz", "6-21g")
        - ```
        - 
        - And you will get:
        - ```julia
        - Main.BasisSets.GaussianBasisSet[
        -     Main.BasisSets.GaussianBasisSet(
        -         [5472.27 817.806 186.446 53.023 17.18 5.91196], 
        -         [0.00183216881 0.01410469084 0.06862615542 0.229375851 0.466398697 0.3641727634], 
        -         0, 0, 0
        -     ), 
        -     Main.BasisSets.GaussianBasisSet([7.40294 1.5762], [-0.4044535832 1.221561761], 0, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([7.40294 1.5762], [0.244586107 0.8539553735], 1, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([7.40294 1.5762], [0.244586107 0.8539553735], 0, 1, 0), 
        -     Main.BasisSets.GaussianBasisSet([7.40294 1.5762], [0.244586107 0.8539553735], 0, 0, 1), 
        -     Main.BasisSets.GaussianBasisSet([0.373684;;], [1.0;;], 0, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([0.373684;;], [1.0;;], 1, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([0.373684;;], [1.0;;], 0, 1, 0), 
        -     Main.BasisSets.GaussianBasisSet([0.373684;;], [1.0;;], 0, 0, 1), 
        -     Main.BasisSets.GaussianBasisSet([5.447178 0.82454724], [0.1562849787 0.9046908767], 0, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([0.18319158;;], [1.0;;], 0, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([5.447178 0.82454724], [0.1562849787 0.9046908767], 0, 0, 0), 
        -     Main.BasisSets.GaussianBasisSet([0.18319158;;], [1.0;;], 0, 0, 0)
        - ]
        - ```
        - """
        1 function parsebasis(molecule, basisset)
        1     atoms = getatoms(molecule)
        1     data = _getbasis(atoms, basisset)
        - 
        1     basis = GaussianBasisSet[]
        - 
        1     for atom in atoms
        3         for shell in data["elements"]["$(atom.number)"]["electron_shells"]
        4             for (index, ℓ) in enumerate(shell["angular_momentum"])
        5                 for momentum in _angularmomentum(ℓ)
        7                     α = hcat(parse.(Float64, shell["exponents"])...)
        7                     d = hcat(parse.(Float64, shell["coefficients"][index])...)
        7                     ℓ = momentum[1]
        7                     m = momentum[2]
        7                     n = momentum[3]
        7                     push!(basis,
        -                     GaussianBasisSet(
        -                             atom.coords,
        -                             α,
        -                             d,
        -                             normalization.(α, ℓ, m, n),
        -                             length(α),
        -                             ℓ,
        -                             m,
        -                             n
        -                         )
        -                     )
        7                 end
        5             end
        4         end
        3     end
        - 
        1     return basis
        - end
        - 
        - function parsebasis_fromfile(molecule, basisset)
        -     atoms = getatoms(molecule)
        -     data = _getbasis_fromfile(atoms, basisset)
        - 
        -     basis = GaussianBasisSet[]
        - 
        -     for (i, atom) in enumerate(atoms)
        -         for shell in data[i]["electron_shells"]
        -             for (index, ℓ) in enumerate(shell["angular_momentum"])
        -                 for momentum in _angularmomentum(ℓ)
        -                     α = hcat(parse.(Float64, shell["exponents"])...)
        -                     d = hcat(parse.(Float64, shell["coefficients"][index])...)
        -                     ℓ = momentum[1]
        -                     m = momentum[2]
        -                     n = momentum[3]
        -                     push!(basis,
        -                     GaussianBasisSet(
        -                             atom.coords,
        -                             α,
        -                             d,
        -                             normalization.(α, ℓ, m, n),
        -                             length(α),
        -                             ℓ,
        -                             m,
        -                             n
        -                         )
        -                     )
        -                 end
        -             end
        -         end
        -     end
        - 
        -     return basis
        - end
